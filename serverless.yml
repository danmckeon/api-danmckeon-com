service: api-danmckeon-com

frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript

# use the cli commands to set the SSM keys used here:
# $ aws ssm put-parameter --name '/general/weatherStationId' --type "SecureString" --value foo --overwrite
# $ aws ssm put-parameter --name '/prod/cryptoKey' --type "SecureString" --value bar --overwrite
# etc

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  lambdaHashingVersion: 20201221
  timeout: 30
  environment:
    WEATHER_STATION_ID: ${ssm:/general/weatherStationId~true}
    WEATHER_STATION_API_KEY: ${ssm:/general/weatherStationApiKey~true}
    TP_LINK_TOKEN: ${ssm:/general/tpLinkToken~true}
    # TODO: Add TREATLIFE TOKEN
  # As necessary, add permissions with iamRoleStatements
  # iamRoleStatements:
  #   - Effect: Allow
  #     Resource: '*'
  #     Action:
  #       - 'dynamodb:*'
  #       - 'sqs:*'
  #       - 's3:*'

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
